name: Build SDL3 with Multi-Graphics API Support

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: emscripten
          - os: macos-latest
            target: ios
          - os: ubuntu-latest
            target: android

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Download SDL3 Source
        run: |
          wget https://github.com/libsdl-org/SDL/archive/refs/tags/preview-3.1.3.zip -O sdl3.zip
          unzip sdl3.zip
          mv SDL-preview-3.1.3 sdl3

      - name: Set up Vulkan SDK (Linux and Windows)
        if: matrix.os != 'macos-latest' && matrix.target != 'emscripten' && matrix.target != 'android'
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt update
            sudo apt install -y libvulkan-dev vulkan-utils
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install -y vulkan-sdk
          fi

      - name: Set up Android NDK
        if: matrix.target == 'android'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
          unzip android-ndk-r21e-linux-x86_64.zip
          export ANDROID_NDK_HOME=$PWD/android-ndk-r21e

      - name: Set up Emscripten SDK
        if: matrix.target == 'emscripten'
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh

      - name: Set up build environment
        run: |
          mkdir build
          cd build

          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.target }}" == "emscripten" ]]; then
            emcmake cmake ../sdl3 \
              -DSDL_VIDEO_OPENGL=OFF \
              -DSDL_VIDEO_VULKAN=OFF \
              -DSDL_VIDEO_METAL=OFF \
              -DSDL_VIDEO_WEBGL=ON \
              -DSDL_RENDER_WEBGL=ON

          elif [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.target }}" == "android" ]]; then
            cmake ../sdl3 \
              -DSDL_VIDEO_DRIVER_ANDROID=ON \
              -DSDL_VIDEO_VULKAN=ON \
              -DSDL_RENDER_VULKAN=ON \
              -DANDROID_ABI=arm64-v8a \
              -DANDROID_PLATFORM=android-21 \
              -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake

          elif [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.target }}" == "ios" ]]; then
            cmake ../sdl3 \
              -DSDL_VIDEO_DRIVER_UIKIT=ON \
              -DSDL_VIDEO_METAL=ON \
              -DSDL_RENDER_METAL=ON \
              -DCMAKE_SYSTEM_NAME=iOS \
              -DCMAKE_OSX_SYSROOT=iphoneos \
              -DCMAKE_OSX_ARCHITECTURES=arm64

          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cmake ../sdl3 \
              -DSDL_VIDEO_DRIVER_X11=ON \
              -DSDL_VIDEO_OPENGL=ON \
              -DSDL_VIDEO_VULKAN=ON \
              -DSDL_RENDER_VULKAN=ON \
              -DSDL_RENDER_OPENGL=ON

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake ../sdl3 \
              -DSDL_VIDEO_DRIVER_WINDOWS=ON \
              -DSDL_VIDEO_OPENGL=ON \
              -DSDL_VIDEO_VULKAN=ON \
              -DSDL_VIDEO_DIRECT3D=ON \
              -DSDL_RENDER_OPENGL=ON \
              -DSDL_RENDER_DIRECT3D=ON \
              -DSDL_RENDER_VULKAN=ON

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cmake ../sdl3 \
              -DSDL_VIDEO_DRIVER_COCOA=ON \
              -DSDL_VIDEO_OPENGL=ON \
              -DSDL_VIDEO_METAL=ON \
              -DSDL_RENDER_OPENGL=ON \
              -DSDL_RENDER_METAL=ON
          fi

      - name: Build SDL3
        working-directory: build
        run: |
          if [[ "${{ matrix.target }}" == "emscripten" ]]; then
            emmake make
          else
            cmake --build . --config Release
          fi

      - name: Upload Artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: SDL3-${{ matrix.os }}-${{ matrix.target }}-build
          path: build/sdl3_output_folder  # Passe diesen Pfad entsprechend an

