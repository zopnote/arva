name: Build SDL3 for Multiple Platforms

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            target: macos-metal-moltenvk
          - platform: ubuntu-latest
            target: linux-vulkan-opengl
          - platform: windows-latest
            target: windows-directx12-vulkan-opengl
          - platform: ubuntu-latest
            target: web-emscripten-webgl
          - platform: macos-latest
            target: ios-metal
          - platform: ubuntu-latest
            target: android-vulkan-opengl
            android: true
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git python3 ninja-build \
          libvulkan-dev mesa-common-dev libx11-dev libxext-dev libxrandr-dev libxi-dev \
          libasound2-dev libpulse-dev libudev-dev libdbus-1-dev libwayland-dev wayland-protocols \
          libxkbcommon-dev libdrm-dev
          sudo apt-get install apt-transport-https
          wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/dart.gpg
          echo 'deb [signed-by=/usr/share/keyrings/dart.gpg arch=amd64] https://storage.googleapis.com/download.dartlang.org/linux/debian stable main' | sudo tee /etc/apt/sources.list.d/dart_stable.list
          sudo apt-get update && sudo apt-get install dart

      - name: Set up dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja python3 sdl2 sdl2_mixer sdl2_image sdl2_ttf pkg-config

      - name: Set up dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake ninja python3 visualstudio2022buildtools -y
          vcpkg install sdl2 sdl2-mixer sdl2-image sdl2-ttf
          vcpkg remove --outdated  # Ensure that outdated dependencies are removed
          vcpkg install sdl2:x64-windows@2.30.9  # Specify version to avoid issues with dependencies
          vcpkg install libogg:x64-windows
          vcpkg install libvorbis:x64-windows

      - name: Install Android NDK
        if: matrix.target == 'android-vulkan-opengl'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          add-to-path: 'true'

      - name: Install Emscripten
        if: matrix.target == 'web-emscripten-webgl'
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh

      - name: Configure build (Powershell)
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd build
          switch (${{ matrix.target }}) {
            'macos-metal-moltenvk' {
              cmake .. -G Ninja -DSDL_METAL=ON -DSDL_VULKAN=ON
            }
            'linux-vulkan-opengl' {
              cmake .. -G Ninja -DSDL_VULKAN=ON -DSDL_OPENGL=ON
            }
            'windows-directx12-vulkan-opengl' {
              cmake .. -G Ninja -DSDL_DIRECTX12=ON -DSDL_VULKAN=ON -DSDL_OPENGL=ON
            }
            'web-emscripten-webgl' {
              source ../emsdk/emsdk_env.sh
              cmake .. -G Ninja -DSDL_WEBGL=ON
            }
            'ios-metal' {
              cmake .. -G Ninja -DSDL_METAL=ON
            }
            'android-vulkan-opengl' {
              cmake .. -G Ninja -DSDL_VULKAN=ON -DSDL_OPENGL=ON -DCMAKE_TOOLCHAIN_FILE=$env:ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake
            }
            default {
              Write-Error "Unknown target: ${{ matrix.target }}"
            }
          }

      - name: Configure build (Bash)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          mkdir build
          cd build
          case ${{ matrix.target }} in
            macos-metal-moltenvk)
              cmake .. -G Ninja -DSDL_METAL=ON -DSDL_VULKAN=ON
              ;;
            linux-vulkan-opengl)
              cmake .. -G Ninja -DSDL_VULKAN=ON -DSDL_OPENGL=ON
              ;;
            windows-directx12-vulkan-opengl)
              cmake .. -G Ninja -DSDL_DIRECTX12=ON -DSDL_VULKAN=ON -DSDL_OPENGL=ON
              ;;
            web-emscripten-webgl)
              source ../emsdk/emsdk_env.sh
              cmake .. -G Ninja -DSDL_WEBGL=ON
              ;;
            ios-metal)
              cmake .. -G Ninja -DSDL_METAL=ON
              ;;
            android-vulkan-opengl)
              cmake .. -G Ninja -DSDL_VULKAN=ON -DSDL_OPENGL=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake
              ;;
          esac

      - name: Build SDL3
        run: |
          cd build
          ninja

      - name: Archive build artifacts
        run: |
          mkdir -p ios-metal
          cp -r build/* ios-metal/
          cp -r build/CMakeFiles ios-metal/
          cp -r build/bin ios-metal/
          cp -r build/core ios-metal/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SDL3-${{ matrix.target }}
          path: ios-metal/
